type TaskConfig = record {
    priority: text;
    execution_delay: nat64;
    retry_attempts: nat8;
    disclosure_level: text;
    storage_type: text;
};

type Task = record {
    id: text;
    description: text;
    status: text;
    timestamp: nat64;
    config: opt TaskConfig;
};

type WalletVerificationRequest = record {
    wallet_address: text;
    nft_contract_address: opt text;
    chain_id: text;
};

type VerificationResult = record {
    is_verified: bool;
    proof_id: text;
    timestamp: nat64;
    anonymous_reference: text;
};

type TokenProofRequest = record {
    token_id: text;
    min_balance: nat64;
    wallet_address: text;
};

type TokenProofResult = record {
    proof_id: text;
    merkle_root: text;
    proof_data: text;
    anonymous_reference: text;
    timestamp: nat64;
    is_valid: bool;
};

type TokenVerificationRequest = record {
    proof_id: text;
    anonymous_reference: text;
};

service : {
    generate_reference: () -> (text);
    assign_task: (reference_id: text, description: text, config: opt TaskConfig) -> (opt text);
    get_tasks: (reference_id: text) -> (opt vec Task) query;
    execute_tasks: (reference_id: text) -> (opt vec Task);
    delete_reference: (reference_id: text) -> (bool);
    
    // NFT verification endpoints
    verify_nft_ownership: (request: WalletVerificationRequest) -> (VerificationResult);
    get_verification_proof: (proof_id: text) -> (opt VerificationResult) query;

    // New ZK proof methods
    generate_token_proof: (request: TokenProofRequest) -> (TokenProofResult);
    verify_token_proof: (request: TokenVerificationRequest) -> (bool) query;
    get_merkle_root: () -> (text) query;
    update_merkle_root: (root: text) -> ();
}