type AttestationRequest = record {
    collection_id: nat64;
    token_id: nat64;
    token_canister_id: nat64;
    minimum_balance: nat64;
    wallet_principal: principal;
};

type AttestationResponse = record {
    success: bool;
    proof_id: opt text;
    error: opt text;
};

type VerificationRequest = record {
    proof_id: text;
};

type VerificationResponse = record {
    success: bool;
    verified: bool;
    error: opt text;
};

type LogLevel = variant {
    Debug;
    Info;
    Warning;
    Error;
};

type LogEntry = record {
    timestamp: int;
    level: LogLevel;
    message: text;
    details: opt text;
};

type Metrics = record {
    total_attestations: nat;
    successful_verifications: nat;
    failed_verifications: nat;
    total_processing_time: int;
    request_count: nat;
    last_cleanup: int;
};

service : {
    // Create a new attestation
    create_attestation: (AttestationRequest) -> (AttestationResponse);
    
    // Verify an existing attestation
    verify_attestation: (VerificationRequest) -> (VerificationResponse);
    
    // Get the canister's principal
    get_canister_principal: () -> (principal) query;
    
    // Get logs
    get_logs: () -> (vec LogEntry) query;
    
    get_metrics: () -> (Metrics) query;
    
    reset_metrics: () -> ();
} 